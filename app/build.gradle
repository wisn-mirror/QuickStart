apply plugin: 'com.android.application'
apply plugin: 'walle'
apply plugin: 'com.alibaba.arouter'

android {
    compileSdkVersion app.compileSdkVersion
    buildToolsVersion app.buildToolsVersion
    defaultConfig {
        multiDexEnabled true
        applicationId app.applicationId
        minSdkVersion app.minSdkVersion
        targetSdkVersion app.targetSdkVersion
        versionCode app.versionCode
        versionName app.versionName
        ndk {
            //如果项目只包含了 armeabi，那么在所有Android设备都可以运行；
            // 如果项目只包含了 armeabi-v7a，除armeabi架构的设备外都可以运行； 如果项目只包含了 x86，那么armeabi架构和armeabi-v7a的Android设备是无法运行的；
            // 如果同时包含了 armeabi， armeabi-v7a和x86，所有设备都可以运行，程序在运行的时候去加载不同平台对应的so，这是较为完美的一种解决方案，同时也会导致包变大。
            //arm64-v8a是可以向下兼容的，其下有armeabi-v7a，armeabi
            //armeabi-v7a向下兼容armeabi
            //设置支持的SO库架构
            abiFilters 'armeabi'//, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
//        dexOptions {
//            additionalParameters = ["--minimal-main-dex"]
//        }
    }

    signingConfigs {
        release {
            Properties properties=new Properties()
            InputStream inputStream= rootProject.file('local.properties').newDataInputStream()
            properties.load(inputStream)
            storeFile file(properties.getProperty('RELEASE_STOREFILE'))
            keyAlias properties.getProperty('RELEASE_KEY_ALIAS')
            keyPassword properties.getProperty('RELEASE_KEY_PASSWORD')
            storePassword properties.getProperty('RELEASE_STOREPASSWORD')

        }
    }
    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        edu {
            minifyEnabled false
//            applicationIdSuffix ".debug"
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            matchingFallbacks = ['release', 'debug']
        }
        debug {
            minifyEnabled false
//            applicationIdSuffix ".debug"
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
//    splits {
//        abi {
//            enable true
//            reset()
//            include 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
//            universalApk true
//        }
//    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation thirdDependencies.walle
    implementation thirdDependencies.bugly
    annotationProcessor thirdDependencies.arouter_compiler
    implementation project(':library')
    if (!isModule.toBoolean()) {
        implementation project(':homepager')
        implementation project(':merchandise')
        implementation project(':shopcart')
        implementation project(':mine')
//        implementation project(':order')
    }
}



walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels");
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${channel}-${appName}-${packageName}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}